//SAFE OPTIONS
WITH StudentData AS (
    SELECT
        s.student_id,
        s.cgpa,
        s.gre_score,
        s.maximum_tuition_fees,
        s.in_need_of_scholarship,
        ARRAY_AGG(DISTINCT sf.field_id) AS student_fields
    FROM student s
    LEFT JOIN studentFieldOfInterest sf ON s.student_id = sf.student_id
    WHERE s.student_id = '3' -- Replace with the specific student's ID
    GROUP BY s.student_id
)

SELECT
    u.university_id,
    u.name,
    u.cs_ranking,
	pcm.program_id,
	
    COUNT(DISTINCT cbfi.course_id) AS matched_courses
FROM university u
JOIN universityRunsProgram up ON u.university_id = up.university_id
JOIN programCourseMapping pcm ON up.program_id = pcm.program_id
JOIN program p on p.program_id = up.program_id
JOIN courseidBelongingToFieldOfInterest cbfi ON pcm.course_id = cbfi.course_id
JOIN StudentData sd ON cbfi.field_id = ANY(sd.student_fields)
WHERE
    (up.tuition_fees<= sd.maximum_tuition_fees  OR
     (sd.in_need_of_scholarship = TRUE AND  up.available_scholarship  = TRUE))
    AND u.cutoff_cgpa <=sd.cgpa 
    AND u.cutoff_grescore <= sd.gre_score
GROUP BY u.university_id, u.name, u.cs_ranking,	pcm.program_id
ORDER BY matched_courses DESC;


/PROBABLE OPTIONS
WITH StudentData AS (
    SELECT
        s.student_id,
        s.cgpa,
        s.gre_score,
        s.maximum_tuition_fees,
        s.in_need_of_scholarship,
        ARRAY_AGG(DISTINCT sf.field_id) AS student_fields
    FROM student s
    LEFT JOIN studentFieldOfInterest sf ON s.student_id = sf.student_id
    WHERE s.student_id = '3' -- Replace with the specific student's ID
    GROUP BY s.student_id
)

SELECT
    u.university_id,
    u.name,
    u.cs_ranking,
	pcm.program_id,
	
    COUNT(DISTINCT cbfi.course_id) AS matched_courses
FROM university u
JOIN universityRunsProgram up ON u.university_id = up.university_id
JOIN programCourseMapping pcm ON up.program_id = pcm.program_id
JOIN program p on p.program_id = up.program_id
JOIN courseidBelongingToFieldOfInterest cbfi ON pcm.course_id = cbfi.course_id
JOIN StudentData sd ON cbfi.field_id = ANY(sd.student_fields)
WHERE
    (up.tuition_fees - sd.maximum_tuition_fees <1000  OR
     (sd.in_need_of_scholarship = TRUE AND  up.available_scholarship  = TRUE))
    AND u.cutoff_cgpa - sd.cgpa <=.1 
    AND u.cutoff_grescore - sd.gre_score <=20
GROUP BY u.university_id, u.name, u.cs_ranking,	pcm.program_id
ORDER BY matched_courses DESC;


//AMBITIOUS UNIVERSITY 

WITH StudentData AS (
    SELECT
        s.student_id,
        s.cgpa,
        s.gre_score,
        s.maximum_tuition_fees,
        s.in_need_of_scholarship,
        ARRAY_AGG(DISTINCT sf.field_id) AS student_fields
    FROM student s
    LEFT JOIN studentFieldOfInterest sf ON s.student_id = sf.student_id
    WHERE s.student_id = '3' -- Replace with the specific student's ID
    GROUP BY s.student_id
)

SELECT
    u.university_id,
    u.name,
    u.cs_ranking,
	pcm.program_id,
	
    COUNT(DISTINCT cbfi.course_id) AS matched_courses
FROM university u
JOIN universityRunsProgram up ON u.university_id = up.university_id
JOIN programCourseMapping pcm ON up.program_id = pcm.program_id
JOIN program p on p.program_id = up.program_id
JOIN courseidBelongingToFieldOfInterest cbfi ON pcm.course_id = cbfi.course_id
JOIN StudentData sd ON cbfi.field_id = ANY(sd.student_fields)
WHERE
    
     u.cutoff_cgpa - sd.cgpa <= .2 
    AND u.cutoff_grescore - sd.gre_score <= 50
	AND up.program_rating > 4.5
GROUP BY u.university_id, u.name, u.cs_ranking,	pcm.program_id
ORDER BY matched_courses DESC;





